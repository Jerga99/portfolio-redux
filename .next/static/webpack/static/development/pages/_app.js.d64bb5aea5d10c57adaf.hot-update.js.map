{"version":3,"file":"static/webpack/static/development/pages/_app.js.d64bb5aea5d10c57adaf.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\nimport App, { Container } from 'next/app';\nimport { Provider } from 'react-redux';\nimport auth0Client from '../services/Auth';\nimport { withRouter } from 'next/router';\nimport { initializeStore } from '../reducers';\n\nimport '@fortawesome/fontawesome-svg-core/styles.css';\nimport \"@fortawesome/fontawesome-free/css/fontawesome.css\";\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStroopwafel, faPlusCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport * as actions from '../actions';\n\nlibrary.add(faStroopwafel, faPlusCircle);\n\nconst isServer = typeof window === 'undefined';\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore (initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState || {});\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, router, ctx, ctx: { req } }) {\n    let pageProps = {}\n\n    const reduxStore = getOrCreateStore();\n    const loggedInUser = process.browser ?\n                          await auth0Client.getTokenForBrowser() :\n                          await auth0Client.getTokenForServer(req);\n\n    if (loggedInUser) {\n      reduxStore.dispatch(actions.authSuccess(loggedInUser))\n      ctx.user = loggedInUser;\n    };\n    // Provide the store to getInitialProps of pages\n    ctx.reduxStore = reduxStore;\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return { pageProps, initialReduxState: reduxStore.getState() }\n  }\n\n  constructor(props) {\n    super(props)\n    this.reduxStore = getOrCreateStore(props.initialReduxState);\n  }\n\n  async componentDidMount() {\n    if (this.props.router.pathname === '/callback') return;\n\n    // try {\n    //   await auth0Client.silentAuth();\n    //   this.reduxStore.dispatch(actions.authSuccess());\n\n    // } catch (err) {\n    //   if (err.error === 'login_required') return;\n    //   console.log(err.error);\n    //   this.reduxStore.dispatch(actions.authFail());\n    // }\n  }\n\n\n  render () {\n    const { Component, pageProps } = this.props;\n\n    return (\n      <Container>\n        <Provider store={this.reduxStore}>\n          <Component {...pageProps} />\n        </Provider>\n      </Container>\n    )\n  }\n}\n\nexport default withRouter(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAAA;;;;;;AACA;AACA;;;;;;;;AAAA;AACA;;;;;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAKA;;;;AArDA;AACA;AAuDA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}